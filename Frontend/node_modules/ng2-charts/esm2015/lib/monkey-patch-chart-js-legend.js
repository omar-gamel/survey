/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:variable-name
/** @type {?} */
const helpers = Chart.helpers;
/** @type {?} */
const defaults = Chart.defaults;
/** @type {?} */
const valueOrDefault = helpers.valueOrDefault;
/**
 * @param {?} labelOpts
 * @param {?} fontSize
 * @return {?}
 */
function getBoxWidth(labelOpts, fontSize) {
    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
        fontSize :
        labelOpts.boxWidth;
}
/**
 * @return {?}
 */
function fit() {
    /** @type {?} */
    const me = this;
    /** @type {?} */
    const opts = me.options;
    /** @type {?} */
    const labelOpts = opts.labels;
    /** @type {?} */
    const display = opts.display;
    /** @type {?} */
    const ctx = me.ctx;
    /** @type {?} */
    const labelFont = helpers.options._parseFont(labelOpts);
    /** @type {?} */
    const fontSize = labelFont.size;
    // Reset hit boxes
    /** @type {?} */
    const hitboxes = me.legendHitBoxes = [];
    /** @type {?} */
    const minSize = me.minSize;
    /** @type {?} */
    const isHorizontal = me.isHorizontal();
    if (isHorizontal) {
        minSize.width = me.maxWidth; // fill all the width
        minSize.height = display ? 10 : 0;
    }
    else {
        minSize.width = display ? 10 : 0;
        minSize.height = me.maxHeight; // fill all the height
    }
    /** @type {?} */
    const getMaxLineWidth = (/**
     * @param {?} textLines
     * @return {?}
     */
    textLines => {
        return textLines.map((/**
         * @param {?} textLine
         * @return {?}
         */
        textLine => {
            return ctx.measureText(textLine).width;
        })).reduce((/**
         * @param {?} acc
         * @param {?} v
         * @return {?}
         */
        (acc, v) => {
            return v > acc ? v : acc;
        }), 0);
    });
    // Increase sizes here
    if (display) {
        ctx.font = labelFont.string;
        if (isHorizontal) {
            // Labels
            // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
            /** @type {?} */
            const lineWidths = me.lineWidths = [0];
            /** @type {?} */
            let maxHeight = 0;
            /** @type {?} */
            let totalHeight = 0;
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            helpers.each(me.legendItems, (/**
             * @param {?} legendItem
             * @param {?} i
             * @return {?}
             */
            (legendItem, i) => {
                /** @type {?} */
                let width;
                /** @type {?} */
                let height;
                /** @type {?} */
                let grossHeight;
                if (helpers.isArray(legendItem.text)) {
                    width = getMaxLineWidth(legendItem.text);
                    height = fontSize * legendItem.text.length;
                    grossHeight = height;
                }
                else {
                    width = ctx.measureText(legendItem.text).width;
                    height = fontSize;
                    grossHeight = height + labelOpts.padding;
                }
                width += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);
                if (grossHeight > maxHeight) {
                    maxHeight = grossHeight;
                }
                if (lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                    totalHeight += maxHeight;
                    maxHeight = 0;
                    lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                }
                // Store the hitbox width and height here. Final position will be updated in `draw`
                hitboxes[i] = {
                    left: 0,
                    top: 0,
                    width,
                    height,
                };
                lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
            }));
            minSize.height += totalHeight + maxHeight;
        }
        else {
            /** @type {?} */
            const vPadding = labelOpts.padding;
            /** @type {?} */
            const columnWidths = me.columnWidths = [];
            /** @type {?} */
            const columnHeights = me.columnHeights = [];
            /** @type {?} */
            let totalWidth = labelOpts.padding;
            /** @type {?} */
            let currentColWidth = 0;
            /** @type {?} */
            let currentColHeight = 0;
            helpers.each(me.legendItems, (/**
             * @param {?} legendItem
             * @param {?} i
             * @return {?}
             */
            (legendItem, i) => {
                /** @type {?} */
                let itemWidth;
                /** @type {?} */
                let height;
                if (helpers.isArray(legendItem.text)) {
                    itemWidth = getMaxLineWidth(legendItem.text);
                    height = fontSize * legendItem.text.length;
                }
                else {
                    itemWidth = ctx.measureText(legendItem.text).width;
                    height = fontSize;
                }
                itemWidth += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);
                // If too tall, go to new column
                if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
                    totalWidth += currentColWidth + labelOpts.padding;
                    columnWidths.push(currentColWidth); // previous column width
                    columnHeights.push(currentColHeight);
                    currentColWidth = 0;
                    currentColHeight = 0;
                }
                // Get max width
                currentColWidth = Math.max(currentColWidth, itemWidth);
                currentColHeight += fontSize + vPadding;
                // Store the hitbox width and height here. Final position will be updated in `draw`
                hitboxes[i] = {
                    left: 0,
                    top: 0,
                    width: itemWidth,
                    height
                };
            }));
            totalWidth += currentColWidth;
            columnWidths.push(currentColWidth);
            columnHeights.push(currentColHeight);
            minSize.width += totalWidth;
        }
    }
    me.width = minSize.width;
    me.height = minSize.height;
}
/**
 * @param {?} vm
 * @param {?} align
 * @return {?}
 */
function getAlignedX(vm, align) {
    return align === 'center'
        ? vm.x + vm.width / 2
        : align === 'right'
            ? vm.x + vm.width - vm.xPadding
            : vm.x + vm.xPadding;
}
/**
 * @return {?}
 */
function draw() {
    /** @type {?} */
    const me = this;
    /** @type {?} */
    const opts = me.options;
    /** @type {?} */
    const labelOpts = opts.labels;
    /** @type {?} */
    const globalDefaults = defaults.global;
    /** @type {?} */
    const defaultColor = globalDefaults.defaultColor;
    /** @type {?} */
    const lineDefault = globalDefaults.elements.line;
    /** @type {?} */
    const legendHeight = me.height;
    /** @type {?} */
    const columnHeights = me.columnHeights;
    /** @type {?} */
    const legendWidth = me.width;
    /** @type {?} */
    const lineWidths = me.lineWidths;
    if (opts.display) {
        /** @type {?} */
        const ctx = me.ctx;
        /** @type {?} */
        const fontColor = valueOrDefault(labelOpts.fontColor, globalDefaults.defaultFontColor);
        /** @type {?} */
        const labelFont = helpers.options._parseFont(labelOpts);
        /** @type {?} */
        const fontSize = labelFont.size;
        /** @type {?} */
        let cursor;
        // Canvas setup
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.strokeStyle = fontColor; // for strikethrough effect
        ctx.fillStyle = fontColor; // render in correct colour
        ctx.font = labelFont.string;
        /** @type {?} */
        const boxWidth = getBoxWidth(labelOpts, fontSize);
        /** @type {?} */
        const hitboxes = me.legendHitBoxes;
        /** @type {?} */
        const maxHeight = hitboxes.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            return x.height;
        })).reduce((/**
         * @param {?} acc
         * @param {?} v
         * @return {?}
         */
        (acc, v) => {
            return v > acc ? v : acc;
        }), 0);
        // current position
        /** @type {?} */
        const drawLegendBox = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} legendItem
         * @return {?}
         */
        (x, y, legendItem) => {
            if (isNaN(boxWidth) || boxWidth <= 0) {
                return;
            }
            // Set the ctx for the box
            ctx.save();
            /** @type {?} */
            const lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
            ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
            if (ctx.setLineDash) {
                // IE 9 and 10 do not support line dash
                ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
            }
            if (opts.labels && opts.labels.usePointStyle) {
                // Recalculate x and y for drawPoint() because its expecting
                // x and y to be center of figure (instead of top left)
                /** @type {?} */
                const radius = boxWidth * Math.SQRT2 / 2;
                /** @type {?} */
                const centerX = x + boxWidth / 2;
                /** @type {?} */
                const centerY = y + fontSize / 2;
                // Draw pointStyle as legend symbol
                helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
            }
            else {
                // Draw box as legend symbol
                if (lineWidth !== 0) {
                    ctx.strokeRect(x, y, boxWidth, fontSize);
                }
                ctx.fillRect(x, y, boxWidth, fontSize);
            }
            ctx.restore();
        });
        /** @type {?} */
        const drawStrikeThrough = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} w
         * @return {?}
         */
        (x, y, w) => {
            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.moveTo(x, y);
            ctx.lineTo(x + w, y);
            ctx.stroke();
        });
        /** @type {?} */
        const drawCrossOver = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} w
         * @param {?} h
         * @return {?}
         */
        (x, y, w, h) => {
            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.moveTo(x, y);
            ctx.lineTo(x + w, y + h);
            ctx.moveTo(x, y + h);
            ctx.lineTo(x + w, y);
            ctx.stroke();
        });
        /** @type {?} */
        const fillText = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} legendItem
         * @param {?} textWidth
         * @return {?}
         */
        (x, y, legendItem, textWidth) => {
            /** @type {?} */
            const halfFontSize = fontSize / 2;
            /** @type {?} */
            const xLeft = boxWidth + halfFontSize + x;
            /** @type {?} */
            const yMiddle = y + halfFontSize;
            if (helpers.isArray(legendItem.text)) {
                helpers.each(legendItem.text, (/**
                 * @param {?} textLine
                 * @param {?} index
                 * @return {?}
                 */
                (textLine, index) => {
                    /** @type {?} */
                    const lineOffset = index * fontSize;
                    ctx.fillText(textLine, xLeft, yMiddle + lineOffset);
                }));
            }
            else {
                ctx.fillText(legendItem.text, xLeft, yMiddle);
            }
            if (legendItem.hidden) {
                if (helpers.isArray(legendItem.text)) {
                    drawCrossOver(xLeft, yMiddle, textWidth, (legendItem.text.length - 1) * (fontSize - 1));
                }
                else {
                    drawStrikeThrough(xLeft, yMiddle, textWidth);
                }
            }
        });
        /** @type {?} */
        const alignmentOffset = (/**
         * @param {?} dimension
         * @param {?} blockSize
         * @return {?}
         */
        (dimension, blockSize) => {
            switch (opts.align) {
                case 'start':
                    return labelOpts.padding;
                case 'end':
                    return dimension - blockSize;
                default: // center
                    return (dimension - blockSize + labelOpts.padding) / 2;
            }
        });
        // Horizontal
        /** @type {?} */
        const isHorizontal = me.isHorizontal();
        if (isHorizontal) {
            cursor = {
                x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
                y: me.top + labelOpts.padding,
                line: 0
            };
        }
        else {
            cursor = {
                x: me.left + labelOpts.padding,
                y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
                line: 0
            };
        }
        /** @type {?} */
        const itemHeight = maxHeight;
        helpers.each(me.legendItems, (/**
         * @param {?} legendItem
         * @param {?} i
         * @return {?}
         */
        (legendItem, i) => {
            /** @type {?} */
            let textWidth;
            /** @type {?} */
            let boxTopOffset;
            if (helpers.isArray(legendItem.text)) {
                textWidth = legendItem.text.map((/**
                 * @param {?} textLine
                 * @return {?}
                 */
                textLine => {
                    return ctx.measureText(textLine).width;
                })).reduce((/**
                 * @param {?} acc
                 * @param {?} v
                 * @return {?}
                 */
                (acc, v) => {
                    return v > acc ? v : acc;
                }), 0);
                boxTopOffset = fontSize / 2 * (legendItem.text.length - 1);
            }
            else {
                textWidth = ctx.measureText(legendItem.text).width;
                boxTopOffset = 0;
            }
            /** @type {?} */
            const width = boxWidth + (fontSize / 2) + textWidth;
            /** @type {?} */
            let x = cursor.x;
            /** @type {?} */
            const topOffset = Math.trunc((maxHeight - hitboxes[i].height) / 2);
            /** @type {?} */
            let y = cursor.y + topOffset;
            // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
            // instead of me.right and me.bottom because me.width and me.height
            // may have been changed since me.minSize was calculated
            if (isHorizontal) {
                if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
                    y = cursor.y += itemHeight;
                    cursor.line++;
                    x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
                }
            }
            else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
                x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                cursor.line++;
                y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
            }
            drawLegendBox(x, y + boxTopOffset, legendItem);
            hitboxes[i].left = x;
            hitboxes[i].top = y;
            // Fill the actual label
            fillText(x, y, legendItem, textWidth);
            if (isHorizontal) {
                cursor.x += width + labelOpts.padding;
            }
            else {
                cursor.y += itemHeight;
            }
        }));
    }
}
/**
 * @return {?}
 */
export function monkeyPatchChartJsLegend() {
    /** @type {?} */
    const plugins = Chart.plugins.getAll();
    /** @type {?} */
    const legend = plugins.filter((/**
     * @param {?} p
     * @return {?}
     */
    p => p.id === 'legend'))[0];
    legend._element.prototype.fit = fit;
    legend._element.prototype.draw = draw;
}
//# sourceMappingURL=data:application/json;base64,