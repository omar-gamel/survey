/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:variable-name
/** @type {?} */
const helpers = Chart.helpers;
/**
 * @param {?} vm
 * @param {?} align
 * @return {?}
 */
function getAlignedX(vm, align) {
    return align === 'center'
        ? vm.x + vm.width / 2
        : align === 'right'
            ? vm.x + vm.width - vm.xPadding
            : vm.x + vm.xPadding;
}
/**
 * @param {?} pt
 * @param {?} vm
 * @param {?} ctx
 * @return {?}
 */
function drawBody(pt, vm, ctx) {
    /** @type {?} */
    const bodyFontSize = vm.bodyFontSize;
    /** @type {?} */
    const bodySpacing = vm.bodySpacing;
    /** @type {?} */
    const bodyAlign = vm._bodyAlign;
    /** @type {?} */
    const body = vm.body;
    /** @type {?} */
    const drawColorBoxes = vm.displayColors;
    /** @type {?} */
    const labelColors = vm.labelColors;
    /** @type {?} */
    let xLinePadding = 0;
    /** @type {?} */
    const colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
    /** @type {?} */
    let textColor;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = 'top';
    ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
    pt.x = getAlignedX(vm, bodyAlign);
    // Before Body
    /** @type {?} */
    const fillLineOfText = (/**
     * @param {?} line
     * @return {?}
     */
    line => {
        ctx.fillText(line, pt.x + xLinePadding, pt.y);
        pt.y += bodyFontSize + bodySpacing;
    });
    // Before body lines
    ctx.fillStyle = vm.bodyFontColor;
    helpers.each(vm.beforeBody, fillLineOfText);
    xLinePadding = drawColorBoxes && bodyAlign !== 'right'
        ? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
        : 0;
    // Draw body lines now
    helpers.each(body, (/**
     * @param {?} bodyItem
     * @param {?} i
     * @return {?}
     */
    (bodyItem, i) => {
        textColor = vm.labelTextColors[i];
        ctx.fillStyle = textColor;
        helpers.each(bodyItem.before, fillLineOfText);
        // Draw Legend-like boxes if needed
        if (drawColorBoxes) {
            // Fill a white rect so that colours merge nicely if the opacity is < 1
            ctx.fillStyle = vm.legendColorBackground;
            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);
            // Border
            ctx.lineWidth = 1;
            ctx.strokeStyle = labelColors[i].borderColor;
            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);
            // Inner square
            ctx.fillStyle = labelColors[i].backgroundColor;
            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
            ctx.fillStyle = textColor;
        }
        helpers.each(bodyItem.lines, fillLineOfText);
        helpers.each(bodyItem.after, fillLineOfText);
    }));
    // Reset back to 0 for after body
    xLinePadding = 0;
    // After body lines
    helpers.each(vm.afterBody, fillLineOfText);
    pt.y -= bodySpacing; // Remove last body spacing
}
/**
 * @return {?}
 */
export function monkeyPatchChartJsTooltip() {
    Chart.Tooltip.prototype.drawBody = drawBody;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ua2V5LXBhdGNoLWNoYXJ0LWpzLXRvb2x0aXAuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL21vbmtleS1wYXRjaC1jaGFydC1qcy10b29sdGlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztNQVVNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTzs7Ozs7O0FBRTdCLFNBQVMsV0FBVyxDQUFDLEVBQUUsRUFBRSxLQUFLO0lBQzVCLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDdkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTztZQUNqQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRO1lBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDM0IsQ0FBQzs7Ozs7OztBQUVELFNBQVMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRzs7VUFDckIsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZOztVQUM5QixXQUFXLEdBQUcsRUFBRSxDQUFDLFdBQVc7O1VBQzVCLFNBQVMsR0FBRyxFQUFFLENBQUMsVUFBVTs7VUFDekIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJOztVQUNkLGNBQWMsR0FBRyxFQUFFLENBQUMsYUFBYTs7VUFDakMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxXQUFXOztRQUM5QixZQUFZLEdBQUcsQ0FBQzs7VUFDZCxNQUFNLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztRQUN2RCxTQUFTO0lBRWIsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDMUIsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDekIsR0FBRyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVuRixFQUFFLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7OztVQUc1QixjQUFjOzs7O0lBQUcsSUFBSSxDQUFDLEVBQUU7UUFDNUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQztJQUNyQyxDQUFDLENBQUE7SUFFRCxvQkFBb0I7SUFDcEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUU1QyxZQUFZLEdBQUcsY0FBYyxJQUFJLFNBQVMsS0FBSyxPQUFPO1FBQ3BELENBQUMsQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRU4sc0JBQXNCO0lBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSTs7Ozs7SUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxTQUFTLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFOUMsbUNBQW1DO1FBQ25DLElBQUksY0FBYyxFQUFFO1lBQ2xCLHVFQUF1RTtZQUN2RSxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztZQUN6QyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztZQUV2RCxTQUFTO1lBQ1QsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDbEIsR0FBRyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1lBQzdDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRXpELGVBQWU7WUFDZixHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDL0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksR0FBRyxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1NBQzNCO1FBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDLEVBQUMsQ0FBQztJQUVILGlDQUFpQztJQUNqQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBRWpCLG1CQUFtQjtJQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDM0MsRUFBRSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQywyQkFBMkI7QUFDbEQsQ0FBQzs7OztBQUVELE1BQU0sVUFBVSx5QkFBeUI7SUFDdkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZVxyXG5cclxuZGVjbGFyZSBjbGFzcyBDaGFydCB7XHJcbiAgc3RhdGljIHJlYWRvbmx5IENoYXJ0OiB0eXBlb2YgQ2hhcnQ7XHJcbiAgc3RhdGljIHJlYWRvbmx5IFRvb2x0aXA6IGFueTtcclxuICBzdGF0aWMgcmVhZG9ubHkgaGVscGVyczogYW55O1xyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0czogYW55O1xyXG4gIHN0YXRpYyByZWFkb25seSBwbHVnaW5zOiBhbnk7XHJcbn1cclxuXHJcbmNvbnN0IGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzO1xyXG5cclxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodm0sIGFsaWduKSB7XHJcbiAgcmV0dXJuIGFsaWduID09PSAnY2VudGVyJ1xyXG4gICAgPyB2bS54ICsgdm0ud2lkdGggLyAyXHJcbiAgICA6IGFsaWduID09PSAncmlnaHQnXHJcbiAgICAgID8gdm0ueCArIHZtLndpZHRoIC0gdm0ueFBhZGRpbmdcclxuICAgICAgOiB2bS54ICsgdm0ueFBhZGRpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdCb2R5KHB0LCB2bSwgY3R4KSB7XHJcbiAgY29uc3QgYm9keUZvbnRTaXplID0gdm0uYm9keUZvbnRTaXplO1xyXG4gIGNvbnN0IGJvZHlTcGFjaW5nID0gdm0uYm9keVNwYWNpbmc7XHJcbiAgY29uc3QgYm9keUFsaWduID0gdm0uX2JvZHlBbGlnbjtcclxuICBjb25zdCBib2R5ID0gdm0uYm9keTtcclxuICBjb25zdCBkcmF3Q29sb3JCb3hlcyA9IHZtLmRpc3BsYXlDb2xvcnM7XHJcbiAgY29uc3QgbGFiZWxDb2xvcnMgPSB2bS5sYWJlbENvbG9ycztcclxuICBsZXQgeExpbmVQYWRkaW5nID0gMDtcclxuICBjb25zdCBjb2xvclggPSBkcmF3Q29sb3JCb3hlcyA/IGdldEFsaWduZWRYKHZtLCAnbGVmdCcpIDogMDtcclxuICBsZXQgdGV4dENvbG9yO1xyXG5cclxuICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xyXG4gIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcclxuICBjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhib2R5Rm9udFNpemUsIHZtLl9ib2R5Rm9udFN0eWxlLCB2bS5fYm9keUZvbnRGYW1pbHkpO1xyXG5cclxuICBwdC54ID0gZ2V0QWxpZ25lZFgodm0sIGJvZHlBbGlnbik7XHJcblxyXG4gIC8vIEJlZm9yZSBCb2R5XHJcbiAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBsaW5lID0+IHtcclxuICAgIGN0eC5maWxsVGV4dChsaW5lLCBwdC54ICsgeExpbmVQYWRkaW5nLCBwdC55KTtcclxuICAgIHB0LnkgKz0gYm9keUZvbnRTaXplICsgYm9keVNwYWNpbmc7XHJcbiAgfTtcclxuXHJcbiAgLy8gQmVmb3JlIGJvZHkgbGluZXNcclxuICBjdHguZmlsbFN0eWxlID0gdm0uYm9keUZvbnRDb2xvcjtcclxuICBoZWxwZXJzLmVhY2godm0uYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xyXG5cclxuICB4TGluZVBhZGRpbmcgPSBkcmF3Q29sb3JCb3hlcyAmJiBib2R5QWxpZ24gIT09ICdyaWdodCdcclxuICAgID8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IChib2R5Rm9udFNpemUgLyAyICsgMSkgOiAoYm9keUZvbnRTaXplICsgMilcclxuICAgIDogMDtcclxuXHJcbiAgLy8gRHJhdyBib2R5IGxpbmVzIG5vd1xyXG4gIGhlbHBlcnMuZWFjaChib2R5LCAoYm9keUl0ZW0sIGkpID0+IHtcclxuICAgIHRleHRDb2xvciA9IHZtLmxhYmVsVGV4dENvbG9yc1tpXTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XHJcbiAgICBoZWxwZXJzLmVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XHJcblxyXG4gICAgLy8gRHJhdyBMZWdlbmQtbGlrZSBib3hlcyBpZiBuZWVkZWRcclxuICAgIGlmIChkcmF3Q29sb3JCb3hlcykge1xyXG4gICAgICAvLyBGaWxsIGEgd2hpdGUgcmVjdCBzbyB0aGF0IGNvbG91cnMgbWVyZ2UgbmljZWx5IGlmIHRoZSBvcGFjaXR5IGlzIDwgMVxyXG4gICAgICBjdHguZmlsbFN0eWxlID0gdm0ubGVnZW5kQ29sb3JCYWNrZ3JvdW5kO1xyXG4gICAgICBjdHguZmlsbFJlY3QoY29sb3JYLCBwdC55LCBib2R5Rm9udFNpemUsIGJvZHlGb250U2l6ZSk7XHJcblxyXG4gICAgICAvLyBCb3JkZXJcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzW2ldLmJvcmRlckNvbG9yO1xyXG4gICAgICBjdHguc3Ryb2tlUmVjdChjb2xvclgsIHB0LnksIGJvZHlGb250U2l6ZSwgYm9keUZvbnRTaXplKTtcclxuXHJcbiAgICAgIC8vIElubmVyIHNxdWFyZVxyXG4gICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnNbaV0uYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICBjdHguZmlsbFJlY3QoY29sb3JYICsgMSwgcHQueSArIDEsIGJvZHlGb250U2l6ZSAtIDIsIGJvZHlGb250U2l6ZSAtIDIpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGhlbHBlcnMuZWFjaChib2R5SXRlbS5saW5lcywgZmlsbExpbmVPZlRleHQpO1xyXG5cclxuICAgIGhlbHBlcnMuZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBSZXNldCBiYWNrIHRvIDAgZm9yIGFmdGVyIGJvZHlcclxuICB4TGluZVBhZGRpbmcgPSAwO1xyXG5cclxuICAvLyBBZnRlciBib2R5IGxpbmVzXHJcbiAgaGVscGVycy5lYWNoKHZtLmFmdGVyQm9keSwgZmlsbExpbmVPZlRleHQpO1xyXG4gIHB0LnkgLT0gYm9keVNwYWNpbmc7IC8vIFJlbW92ZSBsYXN0IGJvZHkgc3BhY2luZ1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbW9ua2V5UGF0Y2hDaGFydEpzVG9vbHRpcCgpIHtcclxuICBDaGFydC5Ub29sdGlwLnByb3RvdHlwZS5kcmF3Qm9keSA9IGRyYXdCb2R5O1xyXG59XHJcbiJdfQ==