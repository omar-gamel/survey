/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:variable-name
/** @type {?} */
var helpers = Chart.helpers;
/** @type {?} */
var defaults = Chart.defaults;
/** @type {?} */
var valueOrDefault = helpers.valueOrDefault;
/**
 * @param {?} labelOpts
 * @param {?} fontSize
 * @return {?}
 */
function getBoxWidth(labelOpts, fontSize) {
    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
        fontSize :
        labelOpts.boxWidth;
}
/**
 * @return {?}
 */
function fit() {
    /** @type {?} */
    var me = this;
    /** @type {?} */
    var opts = me.options;
    /** @type {?} */
    var labelOpts = opts.labels;
    /** @type {?} */
    var display = opts.display;
    /** @type {?} */
    var ctx = me.ctx;
    /** @type {?} */
    var labelFont = helpers.options._parseFont(labelOpts);
    /** @type {?} */
    var fontSize = labelFont.size;
    // Reset hit boxes
    /** @type {?} */
    var hitboxes = me.legendHitBoxes = [];
    /** @type {?} */
    var minSize = me.minSize;
    /** @type {?} */
    var isHorizontal = me.isHorizontal();
    if (isHorizontal) {
        minSize.width = me.maxWidth; // fill all the width
        minSize.height = display ? 10 : 0;
    }
    else {
        minSize.width = display ? 10 : 0;
        minSize.height = me.maxHeight; // fill all the height
    }
    /** @type {?} */
    var getMaxLineWidth = (/**
     * @param {?} textLines
     * @return {?}
     */
    function (textLines) {
        return textLines.map((/**
         * @param {?} textLine
         * @return {?}
         */
        function (textLine) {
            return ctx.measureText(textLine).width;
        })).reduce((/**
         * @param {?} acc
         * @param {?} v
         * @return {?}
         */
        function (acc, v) {
            return v > acc ? v : acc;
        }), 0);
    });
    // Increase sizes here
    if (display) {
        ctx.font = labelFont.string;
        if (isHorizontal) {
            // Labels
            // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
            /** @type {?} */
            var lineWidths_1 = me.lineWidths = [0];
            /** @type {?} */
            var maxHeight_1 = 0;
            /** @type {?} */
            var totalHeight_1 = 0;
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            helpers.each(me.legendItems, (/**
             * @param {?} legendItem
             * @param {?} i
             * @return {?}
             */
            function (legendItem, i) {
                /** @type {?} */
                var width;
                /** @type {?} */
                var height;
                /** @type {?} */
                var grossHeight;
                if (helpers.isArray(legendItem.text)) {
                    width = getMaxLineWidth(legendItem.text);
                    height = fontSize * legendItem.text.length;
                    grossHeight = height;
                }
                else {
                    width = ctx.measureText(legendItem.text).width;
                    height = fontSize;
                    grossHeight = height + labelOpts.padding;
                }
                width += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);
                if (grossHeight > maxHeight_1) {
                    maxHeight_1 = grossHeight;
                }
                if (lineWidths_1[lineWidths_1.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                    totalHeight_1 += maxHeight_1;
                    maxHeight_1 = 0;
                    lineWidths_1[lineWidths_1.length - (i > 0 ? 0 : 1)] = 0;
                }
                // Store the hitbox width and height here. Final position will be updated in `draw`
                hitboxes[i] = {
                    left: 0,
                    top: 0,
                    width: width,
                    height: height,
                };
                lineWidths_1[lineWidths_1.length - 1] += width + labelOpts.padding;
            }));
            minSize.height += totalHeight_1 + maxHeight_1;
        }
        else {
            /** @type {?} */
            var vPadding_1 = labelOpts.padding;
            /** @type {?} */
            var columnWidths_1 = me.columnWidths = [];
            /** @type {?} */
            var columnHeights_1 = me.columnHeights = [];
            /** @type {?} */
            var totalWidth_1 = labelOpts.padding;
            /** @type {?} */
            var currentColWidth_1 = 0;
            /** @type {?} */
            var currentColHeight_1 = 0;
            helpers.each(me.legendItems, (/**
             * @param {?} legendItem
             * @param {?} i
             * @return {?}
             */
            function (legendItem, i) {
                /** @type {?} */
                var itemWidth;
                /** @type {?} */
                var height;
                if (helpers.isArray(legendItem.text)) {
                    itemWidth = getMaxLineWidth(legendItem.text);
                    height = fontSize * legendItem.text.length;
                }
                else {
                    itemWidth = ctx.measureText(legendItem.text).width;
                    height = fontSize;
                }
                itemWidth += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);
                // If too tall, go to new column
                if (i > 0 && currentColHeight_1 + fontSize + 2 * vPadding_1 > minSize.height) {
                    totalWidth_1 += currentColWidth_1 + labelOpts.padding;
                    columnWidths_1.push(currentColWidth_1); // previous column width
                    columnHeights_1.push(currentColHeight_1);
                    currentColWidth_1 = 0;
                    currentColHeight_1 = 0;
                }
                // Get max width
                currentColWidth_1 = Math.max(currentColWidth_1, itemWidth);
                currentColHeight_1 += fontSize + vPadding_1;
                // Store the hitbox width and height here. Final position will be updated in `draw`
                hitboxes[i] = {
                    left: 0,
                    top: 0,
                    width: itemWidth,
                    height: height
                };
            }));
            totalWidth_1 += currentColWidth_1;
            columnWidths_1.push(currentColWidth_1);
            columnHeights_1.push(currentColHeight_1);
            minSize.width += totalWidth_1;
        }
    }
    me.width = minSize.width;
    me.height = minSize.height;
}
/**
 * @param {?} vm
 * @param {?} align
 * @return {?}
 */
function getAlignedX(vm, align) {
    return align === 'center'
        ? vm.x + vm.width / 2
        : align === 'right'
            ? vm.x + vm.width - vm.xPadding
            : vm.x + vm.xPadding;
}
/**
 * @return {?}
 */
function draw() {
    /** @type {?} */
    var me = this;
    /** @type {?} */
    var opts = me.options;
    /** @type {?} */
    var labelOpts = opts.labels;
    /** @type {?} */
    var globalDefaults = defaults.global;
    /** @type {?} */
    var defaultColor = globalDefaults.defaultColor;
    /** @type {?} */
    var lineDefault = globalDefaults.elements.line;
    /** @type {?} */
    var legendHeight = me.height;
    /** @type {?} */
    var columnHeights = me.columnHeights;
    /** @type {?} */
    var legendWidth = me.width;
    /** @type {?} */
    var lineWidths = me.lineWidths;
    if (opts.display) {
        /** @type {?} */
        var ctx_1 = me.ctx;
        /** @type {?} */
        var fontColor = valueOrDefault(labelOpts.fontColor, globalDefaults.defaultFontColor);
        /** @type {?} */
        var labelFont = helpers.options._parseFont(labelOpts);
        /** @type {?} */
        var fontSize_1 = labelFont.size;
        /** @type {?} */
        var cursor_1;
        // Canvas setup
        ctx_1.textAlign = 'left';
        ctx_1.textBaseline = 'middle';
        ctx_1.lineWidth = 0.5;
        ctx_1.strokeStyle = fontColor; // for strikethrough effect
        ctx_1.fillStyle = fontColor; // render in correct colour
        ctx_1.font = labelFont.string;
        /** @type {?} */
        var boxWidth_1 = getBoxWidth(labelOpts, fontSize_1);
        /** @type {?} */
        var hitboxes_1 = me.legendHitBoxes;
        /** @type {?} */
        var maxHeight_2 = hitboxes_1.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            return x.height;
        })).reduce((/**
         * @param {?} acc
         * @param {?} v
         * @return {?}
         */
        function (acc, v) {
            return v > acc ? v : acc;
        }), 0);
        // current position
        /** @type {?} */
        var drawLegendBox_1 = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} legendItem
         * @return {?}
         */
        function (x, y, legendItem) {
            if (isNaN(boxWidth_1) || boxWidth_1 <= 0) {
                return;
            }
            // Set the ctx for the box
            ctx_1.save();
            /** @type {?} */
            var lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
            ctx_1.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
            ctx_1.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx_1.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx_1.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx_1.lineWidth = lineWidth;
            ctx_1.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
            if (ctx_1.setLineDash) {
                // IE 9 and 10 do not support line dash
                ctx_1.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
            }
            if (opts.labels && opts.labels.usePointStyle) {
                // Recalculate x and y for drawPoint() because its expecting
                // x and y to be center of figure (instead of top left)
                /** @type {?} */
                var radius = boxWidth_1 * Math.SQRT2 / 2;
                /** @type {?} */
                var centerX = x + boxWidth_1 / 2;
                /** @type {?} */
                var centerY = y + fontSize_1 / 2;
                // Draw pointStyle as legend symbol
                helpers.canvas.drawPoint(ctx_1, legendItem.pointStyle, radius, centerX, centerY);
            }
            else {
                // Draw box as legend symbol
                if (lineWidth !== 0) {
                    ctx_1.strokeRect(x, y, boxWidth_1, fontSize_1);
                }
                ctx_1.fillRect(x, y, boxWidth_1, fontSize_1);
            }
            ctx_1.restore();
        });
        /** @type {?} */
        var drawStrikeThrough_1 = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} w
         * @return {?}
         */
        function (x, y, w) {
            ctx_1.beginPath();
            ctx_1.lineWidth = 2;
            ctx_1.moveTo(x, y);
            ctx_1.lineTo(x + w, y);
            ctx_1.stroke();
        });
        /** @type {?} */
        var drawCrossOver_1 = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} w
         * @param {?} h
         * @return {?}
         */
        function (x, y, w, h) {
            ctx_1.beginPath();
            ctx_1.lineWidth = 2;
            ctx_1.moveTo(x, y);
            ctx_1.lineTo(x + w, y + h);
            ctx_1.moveTo(x, y + h);
            ctx_1.lineTo(x + w, y);
            ctx_1.stroke();
        });
        /** @type {?} */
        var fillText_1 = (/**
         * @param {?} x
         * @param {?} y
         * @param {?} legendItem
         * @param {?} textWidth
         * @return {?}
         */
        function (x, y, legendItem, textWidth) {
            /** @type {?} */
            var halfFontSize = fontSize_1 / 2;
            /** @type {?} */
            var xLeft = boxWidth_1 + halfFontSize + x;
            /** @type {?} */
            var yMiddle = y + halfFontSize;
            if (helpers.isArray(legendItem.text)) {
                helpers.each(legendItem.text, (/**
                 * @param {?} textLine
                 * @param {?} index
                 * @return {?}
                 */
                function (textLine, index) {
                    /** @type {?} */
                    var lineOffset = index * fontSize_1;
                    ctx_1.fillText(textLine, xLeft, yMiddle + lineOffset);
                }));
            }
            else {
                ctx_1.fillText(legendItem.text, xLeft, yMiddle);
            }
            if (legendItem.hidden) {
                if (helpers.isArray(legendItem.text)) {
                    drawCrossOver_1(xLeft, yMiddle, textWidth, (legendItem.text.length - 1) * (fontSize_1 - 1));
                }
                else {
                    drawStrikeThrough_1(xLeft, yMiddle, textWidth);
                }
            }
        });
        /** @type {?} */
        var alignmentOffset_1 = (/**
         * @param {?} dimension
         * @param {?} blockSize
         * @return {?}
         */
        function (dimension, blockSize) {
            switch (opts.align) {
                case 'start':
                    return labelOpts.padding;
                case 'end':
                    return dimension - blockSize;
                default: // center
                    return (dimension - blockSize + labelOpts.padding) / 2;
            }
        });
        // Horizontal
        /** @type {?} */
        var isHorizontal_1 = me.isHorizontal();
        if (isHorizontal_1) {
            cursor_1 = {
                x: me.left + alignmentOffset_1(legendWidth, lineWidths[0]),
                y: me.top + labelOpts.padding,
                line: 0
            };
        }
        else {
            cursor_1 = {
                x: me.left + labelOpts.padding,
                y: me.top + alignmentOffset_1(legendHeight, columnHeights[0]),
                line: 0
            };
        }
        /** @type {?} */
        var itemHeight_1 = maxHeight_2;
        helpers.each(me.legendItems, (/**
         * @param {?} legendItem
         * @param {?} i
         * @return {?}
         */
        function (legendItem, i) {
            /** @type {?} */
            var textWidth;
            /** @type {?} */
            var boxTopOffset;
            if (helpers.isArray(legendItem.text)) {
                textWidth = legendItem.text.map((/**
                 * @param {?} textLine
                 * @return {?}
                 */
                function (textLine) {
                    return ctx_1.measureText(textLine).width;
                })).reduce((/**
                 * @param {?} acc
                 * @param {?} v
                 * @return {?}
                 */
                function (acc, v) {
                    return v > acc ? v : acc;
                }), 0);
                boxTopOffset = fontSize_1 / 2 * (legendItem.text.length - 1);
            }
            else {
                textWidth = ctx_1.measureText(legendItem.text).width;
                boxTopOffset = 0;
            }
            /** @type {?} */
            var width = boxWidth_1 + (fontSize_1 / 2) + textWidth;
            /** @type {?} */
            var x = cursor_1.x;
            /** @type {?} */
            var topOffset = Math.trunc((maxHeight_2 - hitboxes_1[i].height) / 2);
            /** @type {?} */
            var y = cursor_1.y + topOffset;
            // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
            // instead of me.right and me.bottom because me.width and me.height
            // may have been changed since me.minSize was calculated
            if (isHorizontal_1) {
                if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
                    y = cursor_1.y += itemHeight_1;
                    cursor_1.line++;
                    x = cursor_1.x = me.left + alignmentOffset_1(legendWidth, lineWidths[cursor_1.line]);
                }
            }
            else if (i > 0 && y + itemHeight_1 > me.top + me.minSize.height) {
                x = cursor_1.x = x + me.columnWidths[cursor_1.line] + labelOpts.padding;
                cursor_1.line++;
                y = cursor_1.y = me.top + alignmentOffset_1(legendHeight, columnHeights[cursor_1.line]);
            }
            drawLegendBox_1(x, y + boxTopOffset, legendItem);
            hitboxes_1[i].left = x;
            hitboxes_1[i].top = y;
            // Fill the actual label
            fillText_1(x, y, legendItem, textWidth);
            if (isHorizontal_1) {
                cursor_1.x += width + labelOpts.padding;
            }
            else {
                cursor_1.y += itemHeight_1;
            }
        }));
    }
}
/**
 * @return {?}
 */
export function monkeyPatchChartJsLegend() {
    /** @type {?} */
    var plugins = Chart.plugins.getAll();
    /** @type {?} */
    var legend = plugins.filter((/**
     * @param {?} p
     * @return {?}
     */
    function (p) { return p.id === 'legend'; }))[0];
    legend._element.prototype.fit = fit;
    legend._element.prototype.draw = draw;
}
//# sourceMappingURL=data:application/json;base64,